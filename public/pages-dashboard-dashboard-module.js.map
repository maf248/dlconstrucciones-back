{"version":3,"sources":["./src/app/modules/admin-panel/pages/dashboard/dashboard.component.ts","./src/app/modules/admin-panel/pages/dashboard/dashboard.component.html","./src/app/services/http.service.ts","./src/app/helpers/alerts.ts","./src/app/modules/admin-panel/pages/dashboard/dashboard.module.ts","./src/app/modules/admin-panel/pages/dashboard/dashboard-routing.module.ts"],"names":[],"mappings":"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","file":"pages-dashboard-dashboard-module.js","sourcesContent":["import { Component, Host, HostBinding, OnInit } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { UsersService } from '../../services/users.service';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { AllUsersRes } from '../../interfaces/users.interface';\r\nimport { HttpService } from '../../../../services/http.service';\r\nimport {\r\n  Batch,\r\n  Lotes,\r\n  PostalZones,\r\n} from 'src/app/modules/main/interfaces/http/batches.interface';\r\nimport {\r\n  Services,\r\n  ServicesData,\r\n} from 'src/app/modules/main/interfaces/http/services.interface';\r\nimport {\r\n  Job,\r\n  JobMoreInfo,\r\n  TypesOfJobs,\r\n} from 'src/app/modules/main/interfaces/http/jobs.interface';\r\nimport { User } from 'src/app/models/user.model';\r\nimport { UserStoreService } from '../../../../services/user-store.service';\r\nimport {\r\n  noConnectionAlert,\r\n  customMessageAlert,\r\n} from '../../../../helpers/alerts';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss'],\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n  @HostBinding('class.admin-panel-container') someClass: Host = true;\r\n\r\n  public user!: User;\r\n  public cantidadDeUsuarios: number = 0;\r\n  public lotes: Batch[] = [];\r\n  public servicios: ServicesData[] = [];\r\n  public trabajos: JobMoreInfo[] = [];\r\n  private destroy$: Subject<boolean> = new Subject();\r\n\r\n  constructor(\r\n    private usersService: UsersService,\r\n    private httpService: HttpService,\r\n    private userStore: UserStoreService\r\n  ) {\r\n    this.getLoggedUser();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getAllUsers();\r\n    this.getAllLotes();\r\n    this.getAllServices();\r\n    this.getTrabajos();\r\n  }\r\n\r\n  private getLoggedUser(): void {\r\n    this.userStore.loggedUser$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((res) => {\r\n        this.user = res;\r\n      });\r\n  }\r\n\r\n  private getAllUsers(): void {\r\n    this.usersService\r\n      .getAllUsers()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(\r\n        (res: AllUsersRes) =>\r\n          res?.meta?.status.toString().includes('20')\r\n            ? (this.cantidadDeUsuarios = res?.data.length)\r\n            : customMessageAlert(\r\n                'Error',\r\n                'Probá tu conexión a internet o ponete en contacto con tu proveedor del mismo. Si el problema persiste, ponete en contacto con el administrador de la página',\r\n                'OK',\r\n                'error'\r\n              ),\r\n        (err) => noConnectionAlert(err)\r\n      );\r\n  }\r\n\r\n  private getAllLotes(): void {\r\n    this.httpService\r\n      .getAllZones()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(\r\n        (res: PostalZones) => {\r\n          for (const zona of res?.data) {\r\n            this.httpService\r\n              .getLotes(zona.id.toString())\r\n              .pipe(takeUntil(this.destroy$))\r\n              .subscribe(\r\n                (lotes: Lotes) =>\r\n                  lotes?.meta?.status.toString().includes('20')\r\n                    ? lotes?.data?.Batches?.forEach((lote: Batch) => {\r\n                        this.lotes.push(lote);\r\n                      })\r\n                    : customMessageAlert(\r\n                        'Error',\r\n                        'Probá tu conexión a internet o ponete en contacto con tu proveedor del mismo. Si el problema persiste, ponete en contacto con el administrador de la página',\r\n                        'OK',\r\n                        'error'\r\n                      ),\r\n                (err) => noConnectionAlert(err)\r\n              );\r\n          }\r\n        },\r\n        (err) => noConnectionAlert(err)\r\n      );\r\n  }\r\n\r\n  private getAllServices(): void {\r\n    this.httpService\r\n      .getAllServices()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(\r\n        (res: Services) =>\r\n          res?.meta.status.toString().includes('20')\r\n            ? res?.data?.forEach((servicio) => this.servicios.push(servicio))\r\n            : customMessageAlert(\r\n                'Error',\r\n                'Probá tu conexión a internet o ponete en contacto con tu proveedor del mismo. Si el problema persiste, ponete en contacto con el administrador de la página',\r\n                'OK',\r\n                'error'\r\n              ),\r\n        (err) => noConnectionAlert(err)\r\n      );\r\n  }\r\n\r\n  private getTrabajos(): void {\r\n    this.httpService\r\n      .getTypesOfJob()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((typesOfJobs: TypesOfJobs) => {\r\n        for (const typeOfJob of typesOfJobs.data) {\r\n          this.httpService\r\n            .getOneTypeOfJob(typeOfJob.id.toString())\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(\r\n              (job: Job) =>\r\n                job?.meta.status.toString().includes('20')\r\n                  ? job?.data?.Jobs.forEach((j: JobMoreInfo) => {\r\n                      this.trabajos.push(j);\r\n                    })\r\n                  : customMessageAlert(\r\n                      'Error',\r\n                      'Probá tu conexión a internet o ponete en contacto con tu proveedor del mismo. Si el problema persiste, ponete en contacto con el administrador de la página',\r\n                      'OK',\r\n                      'error'\r\n                    ),\r\n              (err) => noConnectionAlert(err)\r\n            );\r\n        }\r\n      });\r\n  }\r\n}\r\n","<div class=\"row flex-column flex-center\">\r\n  <div class=\"col text-center\">\r\n    <h1 class=\"primary-dark\">Bienvenido, {{ user.nombre }}</h1>\r\n    <hr />\r\n    <h2 class=\"primary\">Algunos números importantes sobre tu página:</h2>\r\n  </div>\r\n</div>\r\n<div class=\"card-group\">\r\n  <!-- Column -->\r\n  <div class=\"card\">\r\n    <div class=\"box bg-info text-center\">\r\n      <h1 class=\"font-light text-white\">{{ cantidadDeUsuarios }}</h1>\r\n      <h6 class=\"text-white\">Usuarios</h6>\r\n    </div>\r\n  </div>\r\n  <!-- Column -->\r\n  <div class=\"card\">\r\n    <div class=\"box bg-primary text-center\">\r\n      <h1 class=\"font-light text-white\">{{ lotes.length }}</h1>\r\n      <h6 class=\"text-white\">lotes</h6>\r\n    </div>\r\n  </div>\r\n  <!-- Column -->\r\n  <div class=\"card\">\r\n    <div class=\"box bg-success text-center\">\r\n      <h1 class=\"font-light text-white\">{{ servicios.length }}</h1>\r\n      <h6 class=\"text-white\">Servicios</h6>\r\n    </div>\r\n  </div>\r\n  <!-- Column -->\r\n  <div class=\"card\">\r\n    <div class=\"box bg-dark text-center\">\r\n      <h1 class=\"font-light text-white\">{{ trabajos.length }}</h1>\r\n      <h6 class=\"text-white\">Trabajos realizados</h6>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport {\r\n  BatchComplete,\r\n  Lotes,\r\n  PostalZones,\r\n} from '../modules/main/interfaces/http/batches.interface';\r\nimport { Interests } from '../modules/main/interfaces/http/interests.interface';\r\nimport {\r\n  Job,\r\n  TypesOfJobs,\r\n} from '../modules/main/interfaces/http/jobs.interface';\r\nimport {\r\n  Services,\r\n  TipoServicio,\r\n} from '../modules/main/interfaces/http/services.interface';\r\nimport {\r\n  Contact,\r\n  ContactFormRes,\r\n} from '../modules/main/interfaces/http/contact.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class HttpService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /**\r\n   * Obtiene las zonas en las cuales se venden lotes y/o construyen casas\r\n   *\r\n   * @return {*}  {Observable<PostalZones>}\r\n   * @memberof HttpService\r\n   */\r\n  public getAllZones(): Observable<PostalZones> {\r\n    return this.http.get<PostalZones>(`${environment.API_BASE_URL}/categories`);\r\n  }\r\n\r\n  /**\r\n   * Obtiene los lotes relacionados a una zona\r\n   *\r\n   * @param zonaId: string\r\n   * @return {*}  {Observable<Lotes>}\r\n   * @memberof HttpService\r\n   */\r\n  public getLotes(zonaId: string): Observable<Lotes> {\r\n    return this.http.get<Lotes>(\r\n      `${environment.API_BASE_URL}/categories/${zonaId}`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene el detalle de un lote particular\r\n   *\r\n   * @param loteId: string\r\n   * @return {*}  {Observable<BatchComplete>}\r\n   * @memberof HttpService\r\n   */\r\n  public getDetalleLote(loteId: string): Observable<BatchComplete> {\r\n    return this.http.get<BatchComplete>(\r\n      `${environment.API_BASE_URL}/batches/${loteId}`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene todos los servicios que ofrece la compañía\r\n   *\r\n   * @return {*}  {Observable<Services>}\r\n   * @memberof HttpService\r\n   */\r\n  public getAllServices(): Observable<Services> {\r\n    return this.http.get<Services>(`${environment.API_BASE_URL}/services`);\r\n  }\r\n  public getOneService(id: string): Observable<TipoServicio> {\r\n    return this.http.get<TipoServicio>(\r\n      `${environment.API_BASE_URL}/services/${id}`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene todos los trabajos realizados por la compañía\r\n   *\r\n   * @return {*}  {Observable<TypesOfJobs>}\r\n   * @memberof HttpService\r\n   */\r\n  public getTypesOfJob(): Observable<TypesOfJobs> {\r\n    return this.http.get<TypesOfJobs>(`${environment.API_BASE_URL}/types`);\r\n  }\r\n\r\n  /**\r\n   * Obtiene uno de los tipos de trabajo realizados por la compañía\r\n   *\r\n   * @param jobTypeID: string\r\n   * @return {*}  {Observable<Job>}\r\n   * @memberof HttpService\r\n   */\r\n  public getOneTypeOfJob(jobTypeID: string): Observable<Job> {\r\n    return this.http.get<Job>(`${environment.API_BASE_URL}/types/${jobTypeID}`);\r\n  }\r\n\r\n  /**\r\n   * Obtiene los artículos de interés creados por la compañía\r\n   *\r\n   * @return {*}  {Observable<Interests>}\r\n   * @memberof HttpService\r\n   */\r\n  public getInterests(): Observable<Interests> {\r\n    return this.http.get<Interests>(`${environment.API_BASE_URL}/interests`);\r\n  }\r\n\r\n  /**\r\n   * Envía el formulario de contacto\r\n   *\r\n   * @param form: Contact\r\n   * @return {*}  {Observable<ContactFormRes>}\r\n   * @memberof HttpService\r\n   */\r\n  public sendContactForm(form: Contact): Observable<ContactFormRes> {\r\n    return this.http.post<ContactFormRes>(\r\n      `${environment.API_BASE_URL}/contact`,\r\n      form\r\n    );\r\n  }\r\n}\r\n","import Swal, { SweetAlertIcon } from 'sweetalert2';\r\nconst swalWithBootstrapButtons = Swal.mixin({\r\n  customClass: {\r\n    confirmButton: 'btn bgc-primary-dark text-white',\r\n    cancelButton: 'btn btn-danger',\r\n  },\r\n  buttonsStyling: false,\r\n});\r\n\r\nexport function noConnectionAlert(err: any): void {\r\n  console.log(err);\r\n\r\n  swalWithBootstrapButtons.fire({\r\n    title: 'Error',\r\n    text: 'Tuvimos un problema de conexión. Chequeá tu conexión a internet y recargá la página y volvé a intentar. Si el problema persiste ponete en contacto con el administrador de la página',\r\n    icon: 'warning',\r\n    confirmButtonText: 'OK',\r\n  });\r\n}\r\n\r\nexport function unknownErrorAlert(data?: any): void {\r\n  console.log(data);\r\n\r\n  swalWithBootstrapButtons.fire({\r\n    title: 'Error',\r\n    text: '¡Lo sentimos!, hay un error desconocido. Probá cargando la info nuevamente y chequeando las validaciones. Si el problema persiste ponete en contacto con el administrador de la página',\r\n    icon: 'warning',\r\n    confirmButtonText: 'OK',\r\n  });\r\n}\r\n\r\nexport function customMessageAlert(\r\n  title: string,\r\n  text: string,\r\n  buttonText: string,\r\n  icon?: SweetAlertIcon\r\n): void {\r\n  swalWithBootstrapButtons.fire({\r\n    title,\r\n    text,\r\n    icon,\r\n    confirmButtonText: buttonText,\r\n  });\r\n}\r\n\r\nexport function alertFailureOrSuccessOnCRUDAction(\r\n  data: any,\r\n  action: 'creó' | 'editó' | 'borró',\r\n  table:\r\n    | 'interés'\r\n    | 'proyecto'\r\n    | 'lote'\r\n    | 'pago'\r\n    | 'archivo'\r\n    | 'servicio'\r\n    | 'contenido'\r\n    | 'imagen de servicio'\r\n    | 'tipo de trabajo'\r\n    | 'trabajo realizado'\r\n    | 'usuario'\r\n    | 'zona'\r\n): void {\r\n  if (data?.meta?.status?.toString().includes('20')) {\r\n    customMessageAlert(\r\n      'Excelente',\r\n      `El ${table} se ${action} correctamente`,\r\n      'OK',\r\n      'success'\r\n    );\r\n  } else {\r\n    unknownErrorAlert(data);\r\n  }\r\n}\r\n\r\nexport function customMessageAlertWithActions(\r\n  title: string,\r\n  text: string,\r\n  buttonText: string,\r\n  icon?: SweetAlertIcon\r\n): Promise<boolean> {\r\n  return new Promise((resolve, reject) => {\r\n    swalWithBootstrapButtons\r\n      .fire({\r\n        title,\r\n        text,\r\n        icon,\r\n        confirmButtonText: buttonText,\r\n      })\r\n      .then((result) => {\r\n        result.isConfirmed ? resolve(true) : reject(false);\r\n      });\r\n  });\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DashboardRoutingModule } from './dashboard-routing.module';\r\nimport { DashboardComponent } from './dashboard.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DashboardComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    DashboardRoutingModule\r\n  ]\r\n})\r\nexport class DashboardModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DashboardComponent } from './dashboard.component';\r\n\r\nconst routes: Routes = [{\r\n  path: '',\r\n  component: DashboardComponent\r\n}];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DashboardRoutingModule { }\r\n"],"sourceRoot":"webpack:///"}
{"version":3,"sources":["./src/app/modules/main/helpers/functions.helper.ts","./src/environments/environment.ts","./src/app/modules/main/services/auth.service.ts","./src/app/services/user-store.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/shared/spinner/spinner.module.ts","./src/app/services/spinner.service.ts","./src/app/shared/spinner/spinner.component.ts","./src/app/shared/interceptors/spinner.interceptor.ts","./src/app/shared/interceptors/token-interceptor.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export const getToken = (): string => {\r\n  return localStorage.getItem('access-token') || ''\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  API_BASE_URL: 'http://localhost:3000/api',\r\n  API_IMAGE_URL: 'http://localhost:3000/images',\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { User } from '../../../models/user.model';\r\nimport {\r\n  ActualizarUsuarioReq,\r\n  IdentifyTokenOActualizarUsuario,\r\n  LoginForm,\r\n  LoginRes,\r\n  RegisterForm,\r\n  RegisterRes,\r\n  RestablecerConstraseniaFirstStep,\r\n  RestablecerContraseniaExitoso,\r\n} from '../interfaces/http/auth.interface';\r\nimport { getToken } from '../helpers/functions.helper';\r\nimport { Router } from '@angular/router';\r\nimport { RestablecerContraseniaLastStep } from '../interfaces/http/auth.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n\r\n  constructor(private httpClient: HttpClient, private router: Router) {}\r\n\r\n  /**\r\n   * Obtiene el usuario que machea con el token del localStorage, si este token está guardado\r\n   *\r\n   * @param token: string\r\n   * @return {*}  {Observable<IdentifyToken>}\r\n   * @memberof AuthService\r\n   */\r\n  public loginWithToken(\r\n    token: string\r\n  ): Observable<IdentifyTokenOActualizarUsuario> {\r\n    return this.httpClient.post<IdentifyTokenOActualizarUsuario>(\r\n      `${environment.API_BASE_URL}/users/identify`,\r\n      token,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene el usuario que machea con las credenciales enviadas.\r\n   *\r\n   * @param payload: LoginForm\r\n   * @return {*}  {Observable<LoginRes>}\r\n   * @memberof AuthService\r\n   */\r\n  public login(payload: LoginForm): Observable<LoginRes> {\r\n    return this.httpClient.post<LoginRes>(\r\n      `${environment.API_BASE_URL}/users/login`,\r\n      payload\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Crea un usuario en la base de datos con la data que se le envía\r\n   *\r\n   * @param payload: RegisterForm\r\n   * @return {*}  {Observable<RegisterRes>}\r\n   * @memberof AuthService\r\n   */\r\n  public register(payload: RegisterForm): Observable<RegisterRes> {\r\n    return this.httpClient.post<RegisterRes>(\r\n      `${environment.API_BASE_URL}/users/register`,\r\n      payload\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Crea un usuario en la base de datos con la data que se le envía\r\n   *\r\n   * @param payload: RegisterForm\r\n   * @return {*}  {Observable<RegisterRes>}\r\n   * @memberof AuthService\r\n   */\r\n  public registerSiendoMaster(payload: RegisterForm): Observable<RegisterRes> {\r\n    return this.httpClient.post<RegisterRes>(\r\n      `${environment.API_BASE_URL}/users/enroll`,\r\n      payload,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Actualiza la información del usuario en la base de datos según la información que se le envía\r\n   *\r\n   * @param payload: any\r\n   * @return {*}  {Observable<IdentifyTokenOActualizarUsuario>}\r\n   * @memberof AuthService\r\n   */\r\n  public actualizarUsuario(\r\n    payload: ActualizarUsuarioReq\r\n  ): Observable<IdentifyTokenOActualizarUsuario> {\r\n    return this.httpClient.post<IdentifyTokenOActualizarUsuario>(\r\n      `${environment.API_BASE_URL}/users/profile`,\r\n      payload,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Actualiza la imágen del usuario\r\n   *\r\n   * @param avatar: File\r\n   * @return {*}  {Observable<IdentifyTokenOActualizarUsuario>}\r\n   * @memberof AuthService\r\n   */\r\n  public actualizarImagenUsuario(\r\n    formData: FormData\r\n  ): Observable<IdentifyTokenOActualizarUsuario> {\r\n    return this.httpClient.post<IdentifyTokenOActualizarUsuario>(\r\n      `${environment.API_BASE_URL}/users/avatar`,\r\n      formData,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Restablecer constraseña\r\n   *\r\n   * @param email:\r\n   * @return {*}  {Observable<any>}\r\n   * @memberof AuthService\r\n   */\r\n  public restablecerContrasenia(\r\n    email: RestablecerConstraseniaFirstStep\r\n  ): Observable<any> {\r\n    return this.httpClient.post<any>(\r\n      `${environment.API_BASE_URL}/users/forgotpass`,\r\n      email\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Genera una nueva contraseña\r\n   *\r\n   * @param payload: RestablecerContraseniaLastStep\r\n   * @return {*}  {Observable<RestablecerContraseniaExitoso>}\r\n   * @memberof AuthService\r\n   */\r\n  public guardarNuevaContrasenia(\r\n    payload: RestablecerContraseniaLastStep\r\n  ): Observable<RestablecerContraseniaExitoso> {\r\n    return this.httpClient.post<RestablecerContraseniaExitoso>(\r\n      `${environment.API_BASE_URL}/users/newpass`,\r\n      payload\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Cierra sesión\r\n   *\r\n   * @return {*}  void\r\n   * @memberof AuthService\r\n   */\r\n  public logout(): void {\r\n    localStorage.removeItem('access-token');\r\n    window.location.reload();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { User } from '../models/user.model';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserStoreService {\r\n  private _user: User = {\r\n    apellido: '',\r\n    email: '',\r\n    id: 0,\r\n    nombre: '',\r\n    role: 'user',\r\n  };\r\n\r\n  private loggedUser: BehaviorSubject<User> = new BehaviorSubject(this._user);\r\n  public loggedUser$ = this.loggedUser.asObservable();\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  public setUser(user: User): void {\r\n    this.loggedUser.next(user);\r\n  }\r\n\r\n  public logout(): void {\r\n    this.loggedUser.next({\r\n      apellido: '',\r\n      email: '',\r\n      id: 0,\r\n      nombre: '',\r\n      role: 'user'\r\n    })\r\n    localStorage.removeItem('access-token')\r\n    this.router.navigateByUrl('/')\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { take } from 'rxjs/operators';\r\nimport { getToken } from './modules/main/helpers/functions.helper';\r\nimport { AuthService } from './modules/main/services/auth.service';\r\nimport { User } from './models/user.model';\r\nimport {\r\n  IdentifyTokenOActualizarUsuario,\r\n  UserData,\r\n} from './modules/main/interfaces/http/auth.interface';\r\nimport Swal from 'sweetalert2';\r\nimport { UserStoreService } from './services/user-store.service';\r\n\r\ndeclare function customInitFunctions(): void;\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private userStore: UserStoreService\r\n  ) {\r\n    customInitFunctions();\r\n    this.loguearUsuarioConToken();\r\n  }\r\n\r\n  private loguearUsuarioConToken() {\r\n    const token = getToken();\r\n    if (token) {\r\n      this.authService\r\n        .loginWithToken(token)\r\n        .pipe(take(1))\r\n        .subscribe(\r\n          (user: IdentifyTokenOActualizarUsuario) =>\r\n            user?.meta?.status === 200\r\n              ? this.crearYSetearUsuario(user?.data)\r\n              : null,\r\n          (err) => {\r\n            Swal.fire(\r\n              '¡Lo sentimos!',\r\n              'Tuvimos un inconveniente a la hora de cargar tu información de usuario. Por favor intentá recargando la página',\r\n              'error'\r\n            );\r\n          }\r\n        );\r\n    }\r\n  }\r\n\r\n  private crearYSetearUsuario(usuario: UserData) {\r\n    const loggedUser: User = {\r\n      id: usuario.id,\r\n      nombre: usuario.first_name,\r\n      apellido: usuario.last_name,\r\n      email: usuario.email,\r\n      role: usuario.role,\r\n      dni: usuario.dni,\r\n      avatar: usuario.avatar,\r\n      phone: usuario.phone,\r\n      projects: usuario.Projects,\r\n    };\r\n    loggedUser ? this.userStore.setUser(loggedUser) : null;\r\n  }\r\n}\r\n","<app-spinner></app-spinner>\r\n<router-outlet></router-outlet>\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { SpinnerModule } from './shared/spinner/spinner.module';\r\nimport { SpinnerInterceptor } from './shared/interceptors/spinner.interceptor';\r\nimport { TokenInterceptor } from './shared/interceptors/token-interceptor';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n    SpinnerModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: SpinnerInterceptor,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: TokenInterceptor,\r\n      multi: true\r\n    },\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SpinnerComponent } from './spinner.component';\r\n\r\n@NgModule({\r\n  declarations: [SpinnerComponent],\r\n  imports: [CommonModule],\r\n  exports: [SpinnerComponent],\r\n})\r\nexport class SpinnerModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SpinnerService {\r\n  public isLoading$: Subject<boolean> = new Subject();\r\n\r\n  public showSpinner(): void {\r\n    this.isLoading$.next(true);\r\n  }\r\n  public hideSpinner(): void {\r\n    this.isLoading$.next(false);\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { SpinnerService } from '../../services/spinner.service';\r\n\r\n@Component({\r\n  selector: 'app-spinner',\r\n  template: `\r\n    <div class=\"overlay\" *ngIf=\"isLoading$ | async\">\r\n      <div class=\"lds-ring\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./spinner.component.scss'],\r\n})\r\nexport class SpinnerComponent {\r\n  public isLoading$: Subject<boolean> = this.spinnerService.isLoading$;\r\n\r\n  constructor(private spinnerService: SpinnerService) {}\r\n}\r\n","import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { SpinnerService } from '../../services/spinner.service';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class SpinnerInterceptor implements HttpInterceptor {\r\n  constructor(private spinnerService: SpinnerService) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    this.spinnerService.showSpinner();\r\n    return next\r\n      .handle(req)\r\n      .pipe(finalize(() => this.spinnerService.hideSpinner()));\r\n  }\r\n}\r\n","import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { getToken } from '../../modules/main/helpers/functions.helper';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const userToken = getToken();\r\n    const modifiedReq = req.clone({\r\n      headers: req.headers.set('access-token', userToken),\r\n    });\r\n    return next.handle(modifiedReq);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'admin',\r\n    loadChildren: () => import('./modules/admin-panel/admin-panel.module').then(m => m.AdminPanelModule)\r\n  },\r\n  {\r\n    path: '',\r\n    loadChildren: () => import('./modules/main/main.module').then(m => m.MainModule)\r\n  },\r\n  {\r\n    path: '**',\r\n    redirectTo: ''\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, {\r\n    preloadingStrategy: PreloadAllModules\r\n  })],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}